/* automatically generated by rust-bindgen 0.65.1 */

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FfiFov {
    pub left: f32,
    pub right: f32,
    pub up: f32,
    pub down: f32,
}
#[test]
fn bindgen_test_layout_FfiFov() {
    const UNINIT: ::std::mem::MaybeUninit<FfiFov> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FfiFov>(),
        16usize,
        concat!("Size of: ", stringify!(FfiFov))
    );
    assert_eq!(
        ::std::mem::align_of::<FfiFov>(),
        4usize,
        concat!("Alignment of ", stringify!(FfiFov))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiFov),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiFov),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).up) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiFov),
            "::",
            stringify!(up)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).down) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiFov),
            "::",
            stringify!(down)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FfiQuat {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_FfiQuat() {
    const UNINIT: ::std::mem::MaybeUninit<FfiQuat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FfiQuat>(),
        16usize,
        concat!("Size of: ", stringify!(FfiQuat))
    );
    assert_eq!(
        ::std::mem::align_of::<FfiQuat>(),
        4usize,
        concat!("Alignment of ", stringify!(FfiQuat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiQuat),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiQuat),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiQuat),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiQuat),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FfiHandSkeleton {
    pub jointPositions: [[f32; 3usize]; 26usize],
    pub jointRotations: [FfiQuat; 26usize],
}
#[test]
fn bindgen_test_layout_FfiHandSkeleton() {
    const UNINIT: ::std::mem::MaybeUninit<FfiHandSkeleton> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FfiHandSkeleton>(),
        728usize,
        concat!("Size of: ", stringify!(FfiHandSkeleton))
    );
    assert_eq!(
        ::std::mem::align_of::<FfiHandSkeleton>(),
        4usize,
        concat!("Alignment of ", stringify!(FfiHandSkeleton))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointPositions) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiHandSkeleton),
            "::",
            stringify!(jointPositions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jointRotations) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiHandSkeleton),
            "::",
            stringify!(jointRotations)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FfiDeviceMotion {
    pub deviceID: ::std::os::raw::c_ulonglong,
    pub orientation: FfiQuat,
    pub position: [f32; 3usize],
    pub linearVelocity: [f32; 3usize],
    pub angularVelocity: [f32; 3usize],
}
#[test]
fn bindgen_test_layout_FfiDeviceMotion() {
    const UNINIT: ::std::mem::MaybeUninit<FfiDeviceMotion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FfiDeviceMotion>(),
        64usize,
        concat!("Size of: ", stringify!(FfiDeviceMotion))
    );
    assert_eq!(
        ::std::mem::align_of::<FfiDeviceMotion>(),
        8usize,
        concat!("Alignment of ", stringify!(FfiDeviceMotion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiDeviceMotion),
            "::",
            stringify!(deviceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiDeviceMotion),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiDeviceMotion),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linearVelocity) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiDeviceMotion),
            "::",
            stringify!(linearVelocity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angularVelocity) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiDeviceMotion),
            "::",
            stringify!(angularVelocity)
        )
    );
}
pub const FfiOpenvrPropertyType_Bool: FfiOpenvrPropertyType = 0;
pub const FfiOpenvrPropertyType_Float: FfiOpenvrPropertyType = 1;
pub const FfiOpenvrPropertyType_Int32: FfiOpenvrPropertyType = 2;
pub const FfiOpenvrPropertyType_Uint64: FfiOpenvrPropertyType = 3;
pub const FfiOpenvrPropertyType_Vector3: FfiOpenvrPropertyType = 4;
pub const FfiOpenvrPropertyType_Double: FfiOpenvrPropertyType = 5;
pub const FfiOpenvrPropertyType_String: FfiOpenvrPropertyType = 6;
pub type FfiOpenvrPropertyType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union FfiOpenvrPropertyValue {
    pub bool_: ::std::os::raw::c_uint,
    pub float_: f32,
    pub int32: ::std::os::raw::c_int,
    pub uint64: ::std::os::raw::c_ulonglong,
    pub vector3: [f32; 3usize],
    pub double_: f64,
    pub string: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_FfiOpenvrPropertyValue() {
    const UNINIT: ::std::mem::MaybeUninit<FfiOpenvrPropertyValue> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FfiOpenvrPropertyValue>(),
        256usize,
        concat!("Size of: ", stringify!(FfiOpenvrPropertyValue))
    );
    assert_eq!(
        ::std::mem::align_of::<FfiOpenvrPropertyValue>(),
        8usize,
        concat!("Alignment of ", stringify!(FfiOpenvrPropertyValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bool_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiOpenvrPropertyValue),
            "::",
            stringify!(bool_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiOpenvrPropertyValue),
            "::",
            stringify!(float_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiOpenvrPropertyValue),
            "::",
            stringify!(int32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiOpenvrPropertyValue),
            "::",
            stringify!(uint64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiOpenvrPropertyValue),
            "::",
            stringify!(vector3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).double_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiOpenvrPropertyValue),
            "::",
            stringify!(double_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiOpenvrPropertyValue),
            "::",
            stringify!(string)
        )
    );
}
impl Default for FfiOpenvrPropertyValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FfiOpenvrProperty {
    pub key: ::std::os::raw::c_uint,
    pub type_: FfiOpenvrPropertyType,
    pub value: FfiOpenvrPropertyValue,
}
#[test]
fn bindgen_test_layout_FfiOpenvrProperty() {
    const UNINIT: ::std::mem::MaybeUninit<FfiOpenvrProperty> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FfiOpenvrProperty>(),
        264usize,
        concat!("Size of: ", stringify!(FfiOpenvrProperty))
    );
    assert_eq!(
        ::std::mem::align_of::<FfiOpenvrProperty>(),
        8usize,
        concat!("Alignment of ", stringify!(FfiOpenvrProperty))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiOpenvrProperty),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiOpenvrProperty),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiOpenvrProperty),
            "::",
            stringify!(value)
        )
    );
}
impl Default for FfiOpenvrProperty {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FfiViewsConfig {
    pub fov: [FfiFov; 2usize],
    pub ipd_m: f32,
}
#[test]
fn bindgen_test_layout_FfiViewsConfig() {
    const UNINIT: ::std::mem::MaybeUninit<FfiViewsConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FfiViewsConfig>(),
        36usize,
        concat!("Size of: ", stringify!(FfiViewsConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<FfiViewsConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(FfiViewsConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fov) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiViewsConfig),
            "::",
            stringify!(fov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipd_m) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiViewsConfig),
            "::",
            stringify!(ipd_m)
        )
    );
}
pub const FfiButtonType_BUTTON_TYPE_BINARY: FfiButtonType = 0;
pub const FfiButtonType_BUTTON_TYPE_SCALAR: FfiButtonType = 1;
pub type FfiButtonType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FfiButtonValue {
    pub type_: FfiButtonType,
    pub __bindgen_anon_1: FfiButtonValue__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union FfiButtonValue__bindgen_ty_1 {
    pub binary: ::std::os::raw::c_uint,
    pub scalar: f32,
}
#[test]
fn bindgen_test_layout_FfiButtonValue__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<FfiButtonValue__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FfiButtonValue__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(FfiButtonValue__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<FfiButtonValue__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(FfiButtonValue__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiButtonValue__bindgen_ty_1),
            "::",
            stringify!(binary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scalar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiButtonValue__bindgen_ty_1),
            "::",
            stringify!(scalar)
        )
    );
}
impl Default for FfiButtonValue__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_FfiButtonValue() {
    const UNINIT: ::std::mem::MaybeUninit<FfiButtonValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FfiButtonValue>(),
        8usize,
        concat!("Size of: ", stringify!(FfiButtonValue))
    );
    assert_eq!(
        ::std::mem::align_of::<FfiButtonValue>(),
        4usize,
        concat!("Alignment of ", stringify!(FfiButtonValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiButtonValue),
            "::",
            stringify!(type_)
        )
    );
}
impl Default for FfiButtonValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FfiDynamicEncoderParams {
    pub updated: ::std::os::raw::c_uint,
    pub bitrate_bps: ::std::os::raw::c_ulonglong,
    pub framerate: f32,
    pub normalized_value: f32,
    pub target_packetSize: f32,
}
#[test]
fn bindgen_test_layout_FfiDynamicEncoderParams() {
    const UNINIT: ::std::mem::MaybeUninit<FfiDynamicEncoderParams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FfiDynamicEncoderParams>(),
        32usize,
        concat!("Size of: ", stringify!(FfiDynamicEncoderParams))
    );
    assert_eq!(
        ::std::mem::align_of::<FfiDynamicEncoderParams>(),
        8usize,
        concat!("Alignment of ", stringify!(FfiDynamicEncoderParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).updated) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiDynamicEncoderParams),
            "::",
            stringify!(updated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitrate_bps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiDynamicEncoderParams),
            "::",
            stringify!(bitrate_bps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framerate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiDynamicEncoderParams),
            "::",
            stringify!(framerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normalized_value) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiDynamicEncoderParams),
            "::",
            stringify!(normalized_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_packetSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FfiDynamicEncoderParams),
            "::",
            stringify!(target_packetSize)
        )
    );
}
extern "C" {
    pub static mut FRAME_RENDER_VS_CSO_PTR: *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut FRAME_RENDER_VS_CSO_LEN: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut FRAME_RENDER_PS_CSO_PTR: *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut FRAME_RENDER_PS_CSO_LEN: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut QUAD_SHADER_CSO_PTR: *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut QUAD_SHADER_CSO_LEN: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut COMPRESS_AXIS_ALIGNED_CSO_PTR: *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut COMPRESS_AXIS_ALIGNED_CSO_LEN: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut COLOR_CORRECTION_CSO_PTR: *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut COLOR_CORRECTION_CSO_LEN: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut QUAD_SHADER_COMP_SPV_PTR: *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut QUAD_SHADER_COMP_SPV_LEN: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut COLOR_SHADER_COMP_SPV_PTR: *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut COLOR_SHADER_COMP_SPV_LEN: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut FFR_SHADER_COMP_SPV_PTR: *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut FFR_SHADER_COMP_SPV_LEN: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut RGBTOYUV420_SHADER_COMP_SPV_PTR: *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut RGBTOYUV420_SHADER_COMP_SPV_LEN: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut g_sessionPath: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut g_driverRootDir: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut LogError:
        ::std::option::Option<unsafe extern "C" fn(stringPtr: *const ::std::os::raw::c_char)>;
}
extern "C" {
    pub static mut LogWarn:
        ::std::option::Option<unsafe extern "C" fn(stringPtr: *const ::std::os::raw::c_char)>;
}
extern "C" {
    pub static mut LogInfo:
        ::std::option::Option<unsafe extern "C" fn(stringPtr: *const ::std::os::raw::c_char)>;
}
extern "C" {
    pub static mut LogDebug:
        ::std::option::Option<unsafe extern "C" fn(stringPtr: *const ::std::os::raw::c_char)>;
}
extern "C" {
    pub static mut LogPeriodically: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            stringPtr: *const ::std::os::raw::c_char,
        ),
    >;
}
extern "C" {
    pub static mut DriverReadyIdle:
        ::std::option::Option<unsafe extern "C" fn(setDefaultChaprone: bool)>;
}
extern "C" {
    pub static mut InitializeDecoder: ::std::option::Option<
        unsafe extern "C" fn(
            configBuffer: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
            codec: ::std::os::raw::c_int,
        ),
    >;
}
extern "C" {
    pub static mut VideoSend: ::std::option::Option<
        unsafe extern "C" fn(
            targetTimestampNs: ::std::os::raw::c_ulonglong,
            buf: *mut ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
            isIdr: bool,
        ),
    >;
}
extern "C" {
    pub static mut HapticsSend: ::std::option::Option<
        unsafe extern "C" fn(
            path: ::std::os::raw::c_ulonglong,
            duration_s: f32,
            frequency: f32,
            amplitude: f32,
        ),
    >;
}
extern "C" {
    pub static mut ShutdownRuntime: ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub static mut PathStringToHash: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong,
    >;
}
extern "C" {
    pub static mut ReportPresent: ::std::option::Option<
        unsafe extern "C" fn(
            timestamp_ns: ::std::os::raw::c_ulonglong,
            offset_ns: ::std::os::raw::c_ulonglong,
        ),
    >;
}
extern "C" {
    pub static mut ReportComposed: ::std::option::Option<
        unsafe extern "C" fn(
            timestamp_ns: ::std::os::raw::c_ulonglong,
            offset_ns: ::std::os::raw::c_ulonglong,
        ),
    >;
}
extern "C" {
    pub static mut ReportEncoded:
        ::std::option::Option<unsafe extern "C" fn(timestamp_ns: ::std::os::raw::c_ulonglong)>;
}
extern "C" {
    pub static mut ReportSave:
        ::std::option::Option<unsafe extern "C" fn(timestamp_ns: ::std::os::raw::c_ulonglong)>;
}
extern "C" {
    pub static mut GetDynamicEncoderParams:
        ::std::option::Option<unsafe extern "C" fn() -> FfiDynamicEncoderParams>;
}
extern "C" {
    pub static mut GetSerialNumber: ::std::option::Option<
        unsafe extern "C" fn(
            deviceID: ::std::os::raw::c_ulonglong,
            outString: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulonglong,
    >;
}
extern "C" {
    pub static mut SetOpenvrProps:
        ::std::option::Option<unsafe extern "C" fn(deviceID: ::std::os::raw::c_ulonglong)>;
}
extern "C" {
    pub static mut WaitForVSync: ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub fn CppEntryPoint(
        pInterfaceName: *const ::std::os::raw::c_char,
        pReturnCode: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn InitializeStreaming();
}
extern "C" {
    pub fn DeinitializeStreaming();
}
extern "C" {
    pub fn SendVSync();
}
extern "C" {
    pub fn RequestIDR();
}
extern "C" {
    pub fn SetTracking(
        targetTimestampNs: ::std::os::raw::c_ulonglong,
        controllerPoseTimeOffsetS: f32,
        deviceMotions: *const FfiDeviceMotion,
        motionsCount: ::std::os::raw::c_int,
        leftHand: *const FfiHandSkeleton,
        rightHand: *const FfiHandSkeleton,
        controllersTracked: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn VideoErrorReportReceive();
}
extern "C" {
    pub fn ShutdownSteamvr();
}
extern "C" {
    pub fn SetOpenvrProperty(deviceID: ::std::os::raw::c_ulonglong, prop: FfiOpenvrProperty);
}
extern "C" {
    pub fn SetChaperone(areaWidth: f32, areaHeight: f32);
}
extern "C" {
    pub fn SetViewsConfig(config: FfiViewsConfig);
}
extern "C" {
    pub fn SetBattery(deviceID: ::std::os::raw::c_ulonglong, gauge_value: f32, is_plugged: bool);
}
extern "C" {
    pub fn SetButton(path: ::std::os::raw::c_ulonglong, value: FfiButtonValue);
}
extern "C" {
    pub fn CaptureFrame();
}
extern "C" {
    #[link_name = "\u{1}?ParseFrameNals@@YAXHPEAEH_K_N@Z"]
    pub fn ParseFrameNals(
        codec: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        targetTimestampNs: ::std::os::raw::c_ulonglong,
        isIdr: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?NalParseClose@@YAXXZ"]
    pub fn NalParseClose();
}
